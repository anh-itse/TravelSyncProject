<<<<<<< HEAD
1/ ServerAPI (APS.NET Web Application)

Install-Package Newtonsoft.Json -Version 10.0.3
Install-Package Microsoft.Owin.Host.SystemWeb -Version 3.0.1
Install-Package Microsoft.Owin.Security -Version 3.0.1
Install-Package Microsoft.AspNet.Razor -Version 3.2.3
Install-Package Microsoft.AspNet.WebPages -Version 3.2.3
Install-Package Microsoft.AspNet.Mvc -Version 5.2.3
Install-Package Microsoft.AspNet.WebApi.Client -Version 5.2.3
Install-Package Microsoft.Owin -Version 3.0.1
Install-Package Microsoft.Owin.Cors -Version 3.0.1
Install-Package Microsoft.AspNet.WebApi.Owin -Version 5.2.3
Install-Package Microsoft.AspNet.WebApi.WebHost -Version 5.2.3
Install-Package IdentityServer3.AccessTokenValidation -Version 2.15.1
dotnet add package Ocelot --version 13.5.1 

copy API/Data
add Startup.cs (Web/OWIN Startup class)
copy WebApiConfig.cs
add Global.asax (Web/Global Application Class)

2/ ServerAuth

dotnet new webapi

dotnet add package Newtonsoft.Json --version 11.0.2
dotnet add package Microsoft.AspNetCore.All --version 2.1.1
dotnet add package IdentityServer4 --version 2.2.0
dotnet add package IdentityServer4.EntityFramework --version 2.1.1
dotnet add package IdentityServer4.AspNetIdentity --version 2.1.0
dotnet add package IdentityServer4.AccessTokenValidation --version 2.6.0
dotnet add package Microsoft.EntityFrameworkCore.Tools.DotNet --version 2.0.3

dotnet build

copy IdentityConfig.cs

Startup.cs
comment 
//app.UseHttpsRedirection();

ConfigureServices(IServiceCollection services)
add code 
            services.AddCors();
            services.AddAuthentication(options =>
                {
                    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                })
                .AddIdentityServerAuthentication(options =>
                {
                    options.Authority = "http://localhost:5000";
                    options.RequireHttpsMetadata = false;

                    options.ApiName = "api1";
                });
            
            X509Certificate2 cert = new X509Certificate2(Path.Combine(Environment.ContentRootPath, "idsrv3test.pfx"), "idsrv3test");
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer("Server=.;Database=test5;Trusted_Connection=True;MultipleActiveResultSets=true"));
            services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

            services.AddTransient<IProfileService, UserProfileService>();

            services.AddIdentityServer()
                .AddSigningCredential(cert)
                .AddInMemoryApiResources(Config.GetApiResources())
                .AddInMemoryClients(Config.GetClients())
                .AddAspNetIdentity<ApplicationUser>()
                .AddProfileService<UserProfileService>();

            services.AddMvc()
                .AddJsonOptions(options =>
                {
                    options.SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Utc;
                    options.SerializerSettings.ContractResolver = new DefaultContractResolver();
                })
                .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);


Configure(IApplicationBuilder app, IHostingEnvironment env)
add code
            app.UseCors(x => x
                .AllowAnyOrigin()
                .AllowAnyMethod()
                .AllowAnyHeader()
                .AllowCredentials());
            app.UseAuthentication();
            app.UseIdentityServer();

dotnet build
dotnet ef migrations add Initial
dotnet ef database update

dotnet publish -r win-x64 --self-contained


copy Controllers/AccountController.cs


debug .NET Core Launch (web)
add chrome
"args": "/C start \"\" \"C:/Program Files (x86)/Google/Chrome/Application/chrome.exe\" ${auto-detect-url}"

3/ Postman

http://localhost:5000/.well-known/openid-configuration

http://localhost:5000/api/Account/Register
{ reqdata: { Email:"test@mail.com", Password: "@Qwe123" }}

http://localhost:5000/connect/token
x-www-form-urlencoded
client_id: browser
client_secret: secret
grant_type: password
scope: offline_access api1 api2
username: test@mail.com
password: @Qwe123

http://localhost:50909/api/data/GetData
Authorization
Bearer Token: .....
{ data: ["a","b"] }

http://localhost:5000/api/Account/GetUserInfo
Authorization: Bearer Token
{}

http://localhost:5000/api/Account/ChangePassword
Authorization: Bearer Token
{ reqdata: { Password: "@Qwe123", PasswordNew: "@Qwe1232" }}

http://localhost:5000/api/Account/DeleteUser
Authorization: Bearer Token
{ reqdata: { UserId: "0dd36a7e-8903-4d2e-9916-31bf338c7698" }}



=======
﻿1. Create file: 
    + SolutionItems => .editorconfig

2. Create file: 
    + SolutionItems => Directory.Build.props

3. Create file: 
    + AssemblyReference: AppHost, Presentation, Shared, Infrastructure, Application, Domain

4. TravelSync.Architecture.Tests (packages: NetArchTest.Rules, FluentAssertions)
    + NamingConventionTests.cs
    + ReferenceTests.cs
    + SealedTests.cs

6. Create Dispatch
    +   TravelSync.Application.Abstractions.Dispatching
        -   IDispatcher.cs
        -   ICommand.cs
        -   ICommandHandler.cs
        -   IQuery.cs
        -   IQueryHandler.cs
    +   TravelSync.Domain.Abstractions.Events       
        -   IDomainEvent.cs
        -   IDomainEventHandler.cs
    +   TravelSync.Application.DependencyInjection.Extensions
        -   ApplicationExtensions.cs
        -   DispatchingRegistration.cs
    +   TravelSync.Infrastructure.Dispatching
        -   Dispatcher.cs
    +   TravelSync.Infrastructure.DependencyInjection.Extensions
        -   InfrastructureExtension.cs => AddDispatching: services.AddScoped<IDispatcher, Dispatcher>();

7. Create LogHelpers
    +   TravelSync.Shared.Helpers
        -   LogHelpers.cs

8. Create Decorators
    +   TravelSync.Application.Decorators
        -   AuditLogs
            -   AuditLogAttribute.cs
            -   LoggingCommandHandlerDecorator.cs
            -   LoggingDomainEventHandlerDecorator.cs
            -   LoggingQueryHandlerDecorator.cs
        -   DatabaseRetry
            -   DatabaseRetryAttribute.cs
            -   DatabaseRetryBase.cs
            -   DatabaseRetryCommanDecorator.cs
            -   DatabaseRetryQueryDecorator.cs
        -   DecoratorAttribute.cs
    +   TravelSync.Application.DependencyInjection.Extensions
        -   DecoratorRegistration.cs
    +   TravelSync.Domain.Helpers
        -   DecoratorHelper.cs
    +   TravelSync.Shared.ExtensionMethods
        -   TypeExtensions.cs

9. Create:
    +   TravelSync.Domain.Shared
        -   AppError.cs
        -   AppResult.cs

10. Create Behaviors
    +   TravelSync.Application.Behaviors
        -   ValidationPipelineBehavior.cs
        -   ResultHandlingPipelineBehavior.cs
    +   TravelSync.Infrastructure.DependencyInjection.Extensions
        -   InfrastructureExtension.cs =>  Đăng ký PipelineBehavior

11. Create DbContext
    +   TravelSync.Infrastructure.Persistence
        -   ApplicationDbContext.cs
        -   TravelSyncDbContextFactory.cs
        -   TravelSyncDbContextSeed.cs
    +   TravelSync.Persistence.DependencyInjection.Extensions
        -   PersistenceExtension.cs 
        -   RepositoryRegistration.cs 
        -   SqlRegistration.cs 

12. Create Repository
    +   TravelSync.Domain.Abstractions.Repositories
        -   IRepository.cs
        -   IRepository.cs
    +   TravelSync.Domain.Abstractions
        -   IScopedDependency.cs
    +   TravelSync.Infrastructure.Persistence.Repositories
        -   Repository.cs
    +   TravelSync.Persistence.DependencyInjection.Extensions
        -   RepositoryRegistration.cs
      
>>>>>>> 672c8e1 (init commit)
